# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11pmJZf0JxJ33TS44odgWVZ1x51yg5rlk
"""

!pip install durable_rules

problem = (input("Problem? : "))  #발생문제를 입력


from durable.lang import ruleset, when_all, m, post, _main_host

if _main_host is not None:
    _main_host._ruleset_directory.clear()       #이전에 실행되고 있는 규칙을 삭제



with ruleset('trouble_FDM'):    #규칙 선언(FDM 프린터에서 발생하는 문제에 관한 규칙)
  @when_all(m.subject == 'leveling')  #발생 문제
  def say_hello(c):
    print('Adjust leveling bolt to regulate {0}' . format(c.m.subject)) #해결방법

  @when_all(m.subject == 'oval')
  def say_hello(c):
    print('Try Remount Belt to solve the {0}' . format(c.m.subject))

  @when_all(m.subject == 'escape')
  def say_hello(c):
    print('Adjust leveling bolt or Clean the Heating bed to solve the {0}' . format(c.m.subject))

  @when_all(m.subject == 'offset')
  def say_hello(c):
    print('Try Remount Belt or Check the Filament to solve the {0}' . format(c.m.subject))

  @when_all(m.subject == 'filament')
  def say_hello(c):
    print('Try clean or change Heating to solve the {0}' . format(c.m.subject))

  @when_all(m.subject == 'print stop')
  def say_hello(c):
    print('Check Power supply and Temperature of nozzle and bed to solve the {0}' . format(c.m.subject))

  @when_all(m.subject == 'structure')
  def say_hello(c):
    print('Clean the Mount bed and remove foreign substance to solve the {0}' . format(c.m.subject))


with ruleset('trouble_SLA'):    #규칙 선언(SLA 프린터에서 발생하는 문제에 관한 규칙)
  @when_all(m.subject == 'leveling')
  def say_hello(c):
    print('Adjust Bed bolt to regulate {0}' . format(c.m.subject))

  @when_all(m.subject == 'escape')
  def say_hello(c):
    print('Clean the Mount bed and remove foreign substance to solve the {0}' . format(c.m.subject))

  @when_all(m.subject == 'structure')
  def say_hello(c):
    print('Rebuild Modeling and replace supporter or Check the Resin Fluid  to solve the {0}' . format(c.m.subject))

  @when_all(m.subject == 'offset')
  def say_hello(c):
    print('Rebuild Modeling and replace supporter or Check the Resin Fluid  to solve the {0}' . format(c.m.subject))

  @when_all(m.subject == 'print stop')
  def say_hello(c):
    print('Check Power supply and status of UV pannel to solve the {0}' . format(c.m.subject))

  @when_all(m.subject == 'foreign substance')
  def say_hello(c):
    print('Check and Change Cleaner Fluid {0}' . format(c.m.subject))



printer = (input("What's your Printer Type? : "))   #문제가 발생한 프린터의 종류 입력



if printer == 'fdm':      #FDM 프린터에 발생한 문제일 경우
  post( 'trouble_FDM' , {'subject': problem})   #FDM 규칙에서 규칙을 탐색 후 출력

if printer == 'sla':      #SLA 프린터에 발생한 문제일 경우
  post( 'trouble_SLA' , {'subject': problem})   #SLA 규칙에서 규칙을 탐색 후 출력

"""# 새 섹션"""

